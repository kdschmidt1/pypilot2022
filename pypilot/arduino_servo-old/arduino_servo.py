# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _arduino_servo
else:
    import _arduino_servo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class ArduinoServo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _fd):
        _arduino_servo.ArduinoServo_swiginit(self, _arduino_servo.new_ArduinoServo(_fd))

    def command(self, command):
        return _arduino_servo.ArduinoServo_command(self, command)

    def reset(self):
        return _arduino_servo.ArduinoServo_reset(self)

    def disengage(self):
        return _arduino_servo.ArduinoServo_disengage(self)

    def reprogram(self):
        return _arduino_servo.ArduinoServo_reprogram(self)

    def poll(self):
        return _arduino_servo.ArduinoServo_poll(self)

    def fault(self):
        return _arduino_servo.ArduinoServo_fault(self)

    def params(self, _raw_max_current, _rudder_min, _rudder_max, _max_current, _max_controller_temp, _max_motor_temp, _rudder_range, _rudder_offset, _rudder_scale, _rudder_nonlinearity, _max_slew_speed, _max_slew_slow, _current_factor, _current_offset, _voltage_factor, _voltage_offset, _min_speed, _max_speed, _gain, _clutch_pwm, _brake):
        return _arduino_servo.ArduinoServo_params(self, _raw_max_current, _rudder_min, _rudder_max, _max_current, _max_controller_temp, _max_motor_temp, _rudder_range, _rudder_offset, _rudder_scale, _rudder_nonlinearity, _max_slew_speed, _max_slew_slow, _current_factor, _current_offset, _voltage_factor, _voltage_offset, _min_speed, _max_speed, _gain, _clutch_pwm, _brake)
    voltage = property(_arduino_servo.ArduinoServo_voltage_get, _arduino_servo.ArduinoServo_voltage_set)
    current = property(_arduino_servo.ArduinoServo_current_get, _arduino_servo.ArduinoServo_current_set)
    controller_temp = property(_arduino_servo.ArduinoServo_controller_temp_get, _arduino_servo.ArduinoServo_controller_temp_set)
    motor_temp = property(_arduino_servo.ArduinoServo_motor_temp_get, _arduino_servo.ArduinoServo_motor_temp_set)
    rudder = property(_arduino_servo.ArduinoServo_rudder_get, _arduino_servo.ArduinoServo_rudder_set)
    max_current = property(_arduino_servo.ArduinoServo_max_current_get, _arduino_servo.ArduinoServo_max_current_set)
    max_controller_temp = property(_arduino_servo.ArduinoServo_max_controller_temp_get, _arduino_servo.ArduinoServo_max_controller_temp_set)
    max_motor_temp = property(_arduino_servo.ArduinoServo_max_motor_temp_get, _arduino_servo.ArduinoServo_max_motor_temp_set)
    rudder_range = property(_arduino_servo.ArduinoServo_rudder_range_get, _arduino_servo.ArduinoServo_rudder_range_set)
    rudder_offset = property(_arduino_servo.ArduinoServo_rudder_offset_get, _arduino_servo.ArduinoServo_rudder_offset_set)
    rudder_scale = property(_arduino_servo.ArduinoServo_rudder_scale_get, _arduino_servo.ArduinoServo_rudder_scale_set)
    rudder_nonlinearity = property(_arduino_servo.ArduinoServo_rudder_nonlinearity_get, _arduino_servo.ArduinoServo_rudder_nonlinearity_set)
    max_slew_speed = property(_arduino_servo.ArduinoServo_max_slew_speed_get, _arduino_servo.ArduinoServo_max_slew_speed_set)
    max_slew_slow = property(_arduino_servo.ArduinoServo_max_slew_slow_get, _arduino_servo.ArduinoServo_max_slew_slow_set)
    current_factor = property(_arduino_servo.ArduinoServo_current_factor_get, _arduino_servo.ArduinoServo_current_factor_set)
    current_offset = property(_arduino_servo.ArduinoServo_current_offset_get, _arduino_servo.ArduinoServo_current_offset_set)
    voltage_factor = property(_arduino_servo.ArduinoServo_voltage_factor_get, _arduino_servo.ArduinoServo_voltage_factor_set)
    voltage_offset = property(_arduino_servo.ArduinoServo_voltage_offset_get, _arduino_servo.ArduinoServo_voltage_offset_set)
    min_speed = property(_arduino_servo.ArduinoServo_min_speed_get, _arduino_servo.ArduinoServo_min_speed_set)
    max_speed = property(_arduino_servo.ArduinoServo_max_speed_get, _arduino_servo.ArduinoServo_max_speed_set)
    gain = property(_arduino_servo.ArduinoServo_gain_get, _arduino_servo.ArduinoServo_gain_set)
    clutch_pwm = property(_arduino_servo.ArduinoServo_clutch_pwm_get, _arduino_servo.ArduinoServo_clutch_pwm_set)
    brake = property(_arduino_servo.ArduinoServo_brake_get, _arduino_servo.ArduinoServo_brake_set)
    flags = property(_arduino_servo.ArduinoServo_flags_get, _arduino_servo.ArduinoServo_flags_set)
    __swig_destroy__ = _arduino_servo.delete_ArduinoServo

# Register ArduinoServo in _arduino_servo:
_arduino_servo.ArduinoServo_swigregister(ArduinoServo)



