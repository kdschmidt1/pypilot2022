# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ugfx
else:
    import _ugfx

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def color(r, g, b):
    return _ugfx.color(r, g, b)
class surface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ugfx.surface_swiginit(self, _ugfx.new_surface(*args))
    __swig_destroy__ = _ugfx.delete_surface

    def store_grey(self, filename):
        return _ugfx.surface_store_grey(self, filename)

    def blit(self, src, xoff, yoff, flip=False):
        return _ugfx.surface_blit(self, src, xoff, yoff, flip)

    def magnify(self, src, factor):
        return _ugfx.surface_magnify(self, src, factor)

    def putpixel(self, x, y, c):
        return _ugfx.surface_putpixel(self, x, y, c)

    def line(self, x1, y1, x2, y2, c):
        return _ugfx.surface_line(self, x1, y1, x2, y2, c)

    def hline(self, x1, x2, y, c):
        return _ugfx.surface_hline(self, x1, x2, y, c)

    def vline(self, x, y1, y2, c):
        return _ugfx.surface_vline(self, x, y1, y2, c)

    def box(self, x1, y1, x2, y2, c):
        return _ugfx.surface_box(self, x1, y1, x2, y2, c)

    def invert(self, x1, y1, x2, y2):
        return _ugfx.surface_invert(self, x1, y1, x2, y2)

    def fill(self, c):
        return _ugfx.surface_fill(self, c)

    def refresh(self):
        return _ugfx.surface_refresh(self)

    def binary_write_sw(self, sclk, mosi):
        return _ugfx.surface_binary_write_sw(self, sclk, mosi)
    width = property(_ugfx.surface_width_get, _ugfx.surface_width_set)
    height = property(_ugfx.surface_height_get, _ugfx.surface_height_set)
    bypp = property(_ugfx.surface_bypp_get, _ugfx.surface_bypp_set)
    p = property(_ugfx.surface_p_get, _ugfx.surface_p_set)

    def getpixel(self, x, y):
        return _ugfx.surface_getpixel(self, x, y)

    def ptr(self):
        return _ugfx.surface_ptr(self)
    xoffset = property(_ugfx.surface_xoffset_get, _ugfx.surface_xoffset_set)
    yoffset = property(_ugfx.surface_yoffset_get, _ugfx.surface_yoffset_set)
    line_length = property(_ugfx.surface_line_length_get, _ugfx.surface_line_length_set)

# Register surface in _ugfx:
_ugfx.surface_swigregister(surface)

class screen(surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, device):
        _ugfx.screen_swiginit(self, _ugfx.new_screen(device))
    __swig_destroy__ = _ugfx.delete_screen
    finfo = property(_ugfx.screen_finfo_get, _ugfx.screen_finfo_set)
    vinfo = property(_ugfx.screen_vinfo_get, _ugfx.screen_vinfo_set)
    fbp = property(_ugfx.screen_fbp_get, _ugfx.screen_fbp_set)
    fbfd = property(_ugfx.screen_fbfd_get, _ugfx.screen_fbfd_set)
    screensize = property(_ugfx.screen_screensize_get, _ugfx.screen_screensize_set)

# Register screen in _ugfx:
_ugfx.screen_swigregister(screen)

class spiscreen(surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, driver=-1):
        _ugfx.spiscreen_swiginit(self, _ugfx.new_spiscreen(driver))
    __swig_destroy__ = _ugfx.delete_spiscreen

    def refresh(self):
        return _ugfx.spiscreen_refresh(self)
    contrast = property(_ugfx.spiscreen_contrast_get, _ugfx.spiscreen_contrast_set)

# Register spiscreen in _ugfx:
_ugfx.spiscreen_swigregister(spiscreen)



